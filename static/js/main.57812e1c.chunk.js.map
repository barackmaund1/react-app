{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","this","props","totalCounters","Component","Counter","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleDelete","counterId","filter","c","handleReset","console","log","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAgBeA,E,uKAXP,OACI,yBAAKC,UAAU,gCACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UACP,0BAAMD,UAAU,oCAAoCE,KAAKC,MAAMC,oB,GANnDC,aC0BNC,G,6KAxBD,IAAD,OAET,OACA,6BAEI,0BAAMN,UAAWE,KAAKK,mBAAoBL,KAAKM,eAC/C,4BAAQC,QAAU,kBAAK,EAAKN,MAAMO,YAAY,EAAKP,MAAMQ,UAAUX,UAAU,4BAA7E,aAED,4BAAQS,QAAS,kBAAM,EAAKN,MAAMS,SAAS,EAAKT,MAAMQ,QAAQE,KAAKb,UAAU,6BAA7E,a,wCAKC,IAAIc,EAAU,mBAEd,OADAA,GAAyC,IAA7BZ,KAAKC,MAAMQ,QAAQI,MAAe,UAAY,Y,oCAIhD,IACHA,EAASb,KAAKC,MAAMQ,QAApBI,MACP,OAAiB,IAAVA,EAAc,oCAAcA,M,GAtBrBV,cCkBPW,E,uKAfD,IAAD,OACL,OACA,6BACI,4BACAP,QAASP,KAAKC,MAAMc,QACpBjB,UAAU,0BAFV,SAGCE,KAAKC,MAAMe,SAASC,KAAI,SAAAR,GAAO,OACjC,kBAAC,EAAD,CAASS,IAAKT,EAAQE,GACtBD,SAAU,EAAKT,MAAMS,SACrBF,YAAa,EAAKP,MAAMO,YACxBC,QAASA,Y,GAZGN,aCqDRgB,E,kDA1Cf,WAAYlB,GAAO,IAAD,8BACf,cAAMA,IATPmB,MAAQ,CACNJ,SAAS,CACL,CAACL,GAAI,EAAEE,MAAM,GACb,CAACF,GAAI,EAAEE,MAAM,GACb,CAACF,GAAI,EAAEE,MAAM,GACb,CAACF,GAAI,EAAEE,MAAM,KAGH,EAKlBQ,gBAAkB,SAAAZ,GACd,IAAMO,EAAQ,YAAM,EAAKI,MAAMJ,UACzBM,EAAON,EAASO,QAAQd,GAC9BO,EAASM,GAAT,eAAoBb,GACpBO,EAASM,GAAOT,QAChB,EAAKW,SAAS,CAAER,cAVF,EAYlBS,aAAe,SAAAC,GACf,IAAMV,EAAW,EAAKI,MAAMJ,SAASW,QAAO,SAAAC,GAAC,OAAGA,EAAEjB,KAAMe,KACxD,EAAKF,SAAS,CAAER,cAdE,EAiBlBa,YAAc,WACd,IAAMb,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAAAW,GAEzC,OADAA,EAAEf,MAAQ,EACHe,KAEP,EAAKJ,SAAS,CAACR,cApBZc,QAAQC,IAAI,oBAAoB,EAAK9B,OAFtB,E,qDAyBhB,OACE,kBAAC,IAAM+B,SAAP,KACE,kBAAC,EAAD,CAAQ9B,cAAeF,KAAKoB,MAAMJ,SAASW,QAAO,SAAAC,GAAC,OAAGA,EAAEf,MAAQ,KAAGoB,SACrE,0BAAMnC,UAAU,aAChB,kBAAC,EAAD,CACAkB,SAAUhB,KAAKoB,MAAMJ,SACrBD,QAASf,KAAK6B,YACbrB,YAAaR,KAAKqB,gBAClBX,SAAUV,KAAKyB,qB,GA1CFtB,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.57812e1c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NavBar extends Component {\n   \n    render() { \n        return (\n            <nav className='navbar navbar-light bg-light'>\n                <a className='navbar-brand' href='#'>Navbar</a>\n         <span className=\"badge badge-pill badge-secondary\">{this.props.totalCounters}\n        </span>\n            </nav>\n        );\n\n    }\n}\n \nexport default NavBar;","import React, { Component, Fragment } from 'react';\n\nclass Counter extends Component {\n    \n    render() { \n     \n    return (\n    <div>\n     \n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button onClick={ () =>this.props.onIncrement(this.props.counter)} className='btn btn-secondary btn-sm'>Increment</button>\n\n       <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button>\n\n    </div>)\n}\n    getBadgeClasses() {\n        let classes = 'badge m-2 badge-';\n        classes += (this.props.counter.value === 0) ? 'warning' : 'primary';\n        return classes;\n    }\n\n    formatCount(){\n        const {value} = this.props.counter\n        return value === 0 ? <h1>Zero</h1>:value;\n    }\n}\n \nexport default Counter ; ","import React, { Component } from 'react';\nimport Counter from './counter'\n\nclass Counters extends Component {\n \n    render() { \n        return ( \n        <div>\n            <button \n            onClick={this.props.onReset}\n            className=\"btn-primary btn-sm m-2\">Reset</button>\n           { this.props.counters.map(counter=>\n           <Counter key={counter.id} \n           onDelete={this.props.onDelete}\n           onIncrement={this.props.onIncrement}\n           counter={counter}/>)}\n        </div>);\n    }\n}\n \nexport default Counters;"," import React, { Component } from 'react';\nimport Navbar from './components/navbar'\nimport './App.css';\nimport Counters from './components/counters'\n\nclass App extends Component{\n  state = { \n    counters:[\n        {id :1,value:2},\n        {id :2,value:0},\n        {id :3,value:4},\n        {id :4,value:0},\n    ]\n };\nconstructor(props){\n   super(props);\n   console.log('App - Constructor',this.props)\n   \n }\nhandleIncrement = counter =>{\n    const counters =[...this.state.counters]\n    const index =counters.indexOf(counter);\n    counters[index]={...counter};\n    counters[index].value++;\n    this.setState({ counters });\n}\nhandleDelete = counterId =>{\nconst counters = this.state.counters.filter(c=> c.id !==counterId);\nthis.setState({ counters })\n };\n\nhandleReset = () =>  {\nconst counters = this.state.counters.map(c =>{\nc.value = 0;\nreturn c;\n});\nthis.setState({counters});\n};\nrender(){\n  return (\n    <React.Fragment>\n      <Navbar totalCounters={this.state.counters.filter(c =>c.value > 0).length}/>\n    <main className='container'>\n    <Counters \n    counters={this.state.counters}\n    onReset={this.handleReset}\n     onIncrement={this.handleIncrement}\n     onDelete={this.handleDelete}\n     />\n    </main>\n    </React.Fragment>\n\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}